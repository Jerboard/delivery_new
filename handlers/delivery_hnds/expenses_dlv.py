from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.enums.content_type import ContentType

from datetime import datetime
from asyncio import sleep

import db
import keyboards as kb
from init import dp, bot, TZ, log_error
from config import config
from .base_dlv import save_expenses
from utils.redis_utils import get_redis_data
from utils.text_utils import get_order_text
from data.base_data import order_status_data
from enums import DeliveryCB, OrderStatus, RedisKey, UserActions, DeliveryStatus, OrderAction, TypeOrderUpdate


# —Å–º–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–∞—Ç–∞–º–∏
@dp.callback_query(lambda cb: cb.data.startswith(DeliveryCB.EXPENSES_DVL_1.value))
async def expenses_dvl_1(cb: CallbackQuery):
    await cb.message.edit_reply_markup(reply_markup=kb.expenses_dvl_kb())


# –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞—Ç—ã 1 –ü—Ä–æ—Å–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—É–º–º—É
@dp.callback_query(lambda cb: cb.data.startswith(DeliveryCB.EXPENSES_DVL_2.value))
async def expenses_dvl_2(cb: CallbackQuery, state: FSMContext):
    _, category_id = cb.data.split(':')
    await state.set_state(DeliveryStatus.EXPENSES_DVL_3)
    await state.update_data(data={'column': category_id})
    await cb.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤', reply_markup=kb.get_close_kb())


# –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞—Ç—ã 2 –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å—É–º–º—É –ø—Ä–æ—Å–∏—Ç —Ñ–æ—Ç–æ
@dp.message(StateFilter(DeliveryStatus.EXPENSES_DVL_3))
async def expenses_dvl_3(msg: Message, state: FSMContext):
    if msg.text.isdigit():
        data = await state.get_data()

        await state.update_data(data={data["column"]: int(msg.text), 'exp_sum': int(msg.text)})
        await state.set_state(DeliveryStatus.EXPENSES_DVL_4)

        if data['column'] in ['b', 'g', 'k']:
            text = f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
        else:
            text = f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
        await msg.answer(text, reply_markup=kb.get_close_kb())

    else:
        sent = await msg.answer('‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–æ–π')
        await sleep(3)
        await sent.delete()


# –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞—Ç—ã 3 –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –Ω–µ—Ç,
# —Ç–æ –ø—Ä–æ—Å–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
@dp.message(StateFilter(DeliveryStatus.EXPENSES_DVL_4))
async def expenses_dvl_4(msg: Message, state: FSMContext):
    if msg.content_type == ContentType.PHOTO:
        await state.update_data(data={'photo_id': msg.photo[-1].file_id})
        if msg.caption:
            data = await state.get_data()
            await state.clear()
            await save_expenses(msg.from_user.id, data)

        else:
            await state.set_state(DeliveryStatus.EXPENSES_DVL_5)
            await msg.answer('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', reply_markup=kb.get_close_kb())

    else:
        data = await state.get_data()
        if data ['column'] in ['b', 'g', 'k']:
            await state.clear()
            await save_expenses (msg.from_user.id, data)

        else:
            await msg.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ', reply_markup=kb.get_close_kb())


# —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç
@dp.message(StateFilter(DeliveryStatus.EXPENSES_DVL_5))
async def expenses_dvl_5(msg: Message, state: FSMContext):
    data = await state.get_data()
    await state.clear()

    user_info = await db.get_user_info(user_id=msg.from_user.id)
    await save_expenses (msg.from_user.id, data)

    # expenses_dvl(msg.text, data['column'], data['sum'], dlv[6])

    today = datetime.now(TZ).strftime(config.time_form)
    text = f'–ö—É—Ä—å–µ—Ä: {user_info.name}\n' \
           f'–í—Ä–µ–º—è: {today}\n' \
           f'–°—É–º–º–∞: {data["sum"]} ‚ÇΩ\n' \
           f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {msg.text}'

    await bot.send_photo(config.group_expenses, photo=data['photo'], caption=text)
    await msg.answer('‚úÖ –í–∞—à–∞ —Ç—Ä–∞—Ç–∞ —É—á—Ç–µ–Ω–∞')
    # –∂—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π
    await db.save_user_action (
        user_id=msg.from_user.id,
        dlv_name=user_info.name,
        action=UserActions.ADD_EXPENSES.value,
        comment=text
    )


# –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
@dp.callback_query(lambda cb: cb.data.startswith(DeliveryCB.EXPENSES_DVL_VIEW.value))
async def expenses_dvl_view(cb: CallbackQuery):
    user_info = await db.get_user_info(user_id=cb.from_user.id)
    expenses = await db.get_report_dlv(dlv_name=user_info.name)
    if not expenses:
        text = '–ù–µ—Ç —Ç—Ä–∞—Ç'
    else:
        text = f'üí∏–¢—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{expenses.l}'
    await cb.message.answer(text)
