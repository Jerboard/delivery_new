from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from datetime import datetime
from asyncio import sleep

import db
import keyboards as kb
from init import dp
from config import Config
from google_api.utils_google import is_table_exist
import google_api as ggl
from utils.base_utils import get_today_date_str, check_active_post_orders
from handlers.owner_hnds.owner_base import owner_start
from utils.local_data_utils import save_table_id
from enums import OwnerCB, OwnerStatus


# –º–µ–Ω—è–µ—Ç —Ä–∞–±–æ—á—É—é —Ç–∞–±–ª–∏—Ü—É. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
@dp.callback_query(lambda cb: cb.data.startswith(OwnerCB.CHANGE_TAB.value))
async def change_tab_1(cb: CallbackQuery, state: FSMContext):
    await state.set_state(OwnerStatus.CHANGE_TAB)
    text = f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã.\n\n' \
           f'‚ÄºÔ∏è–í–∞–∂–Ω–æ: —Ä–∞–±–æ—á–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º –ª–∏—Å—Ç–µ. ' \
           f'–ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–∞—Ç—å –±–æ—Ç—É –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ\n\n' \
           f'–°–ª—É–∂–µ–±–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:\n\n <code>servise-test@my-project-sheet-test-130722.iam.gserviceaccount.com</code>'

    await cb.message.answer(text, reply_markup=kb.get_close_kb())


# –ú–µ–Ω—è–µ—Ç —Ä–∞–±–æ—á—É—é —Ç–∞–±–ª–∏—Ü—É. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É
@dp.message(StateFilter(OwnerStatus.CHANGE_TAB))
async def change_tab_2(msg: Message, state: FSMContext):
    await state.clear()
    time_start = datetime.now()
    sent = await msg.answer ('‚è≥ –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è')

    if is_table_exist(msg.text):
        update_table = True
        while update_table:
            wait_orders = await db.get_orders (get_wait_update=True)
            wait_reports = await db.get_reports_all_dlv (get_wait_update=True)

            wait_updates = len(wait_orders) + len(wait_reports)
            if wait_updates == 0:
                update_table = False
            else:
                try:
                    await sent.edit_text (
                        text=f'‚è≥ –û–∂–∏–¥–∞–µ—Ç –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ü—Ä–∏–º–µ—Ä–Ω–æ {wait_updates * 3} —Å.',
                        reply_markup=kb.get_hard_update_kb()
                    )
                except:
                    pass
                await sleep(3)

        # –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
        await db.delete_orders ()
        # –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É
        error_text = await ggl.save_new_order_table(msg.text)
        # –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—á—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        await check_active_post_orders()
        # –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –æ—Ç—á—ë—Ç–æ–≤
        await db.clear_report_table ()
        # –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –∏ —Ç—Ä–∞—Ç—ã
        await ggl.save_new_report_table(msg.text)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        save_table_id(msg.text)
        # –ø–æ —Ä–µ–ª–∏–∑—É —É–¥–∞–ª–∏—Ç—å. –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞—Ç—ã
        await db.update_multi_orders (date_str=get_today_date_str (), test=True)

        time_finish = datetime.now() - time_start
        await sent.edit_text(f'‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {time_finish}')
        if error_text:
            await msg.answer(f'{error_text}\n\n‚ÄºÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É')

    else:
        await sent.delete()
        await msg.answer('‚Äº –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞')


# —Å—Ç–∞–≤–∏—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–æ
@dp.callback_query(lambda cb: cb.data.startswith(OwnerCB.HARD_UPDATE.value))
async def hard_update(cb: CallbackQuery):
    await db.hard_order_update()


# –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É update_table
@dp.callback_query(lambda cb: cb.data.startswith(OwnerCB.UPDATE_TABLE.value))
async def update_google_table(cb: CallbackQuery):
    _, type_table = cb.data.split(':')
    sent = await cb.message.answer ('‚è≥')
    if type_table == 'order':
        await ggl.update_google_table(cb.from_user.id)
    else:
        # –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –æ—Ç—á—ë—Ç–æ–≤
        await db.clear_report_table ()
        # –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –∏ —Ç—Ä–∞—Ç—ã
        await ggl.save_new_report_table ()

    await owner_start(user_id=cb.from_user.id, msg_id=cb.message.message_id)
    await sent.delete()



# –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞
# @dp.callback_query(lambda cb: cb.data.startswith(OwnerCB.UPDATE_USERS_TABLE_1.value))
# async def update_users_1(cb: CallbackQuery):
#     ga.add_users_table()
#     await cb.answer('üì§–î–∞–Ω–Ω—ã–µ –≤—ã–≥—Ä—É–∂–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É', show_alert=True)


# –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞
# @dp.callback_query_handler(text_startswith='update_users_table_2')
# async def update_users_2(cb: CallbackQuery):
#     ga.update_users_table()
#     await cb.answer('üì•–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', show_alert=True)