import re

import db
from utils.base_utils import get_order_cost
from data import base_data as dt
from enums import (OrderStatus, UserRole, ShortText, KeyWords, done_status_list, active_status_list, ref_status_list,
                   CompanyDLV)


# —É–±–∏—Ä–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
def clearing_text(text: str) -> str:
    clear_text = ''
    for row in text.split ('\n'):
        if row and row[0] == '#':
            clear_text = f'{clear_text}\n{row[1:]}'
        elif not row or not re.search ('None', row):
            clear_text = f'{clear_text}\n{row}'

    return clear_text.replace('None', '–Ω/–¥').strip()


# —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –ø–æ —Å—Ç—Ä–æ–∫–µ
def get_order_text(order: db.OrderRow) -> str:
    cost = get_order_cost(order)
    bottom_text = '‚úñÔ∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ —è–≤–∏–ª—Å—è' if order.d == KeyWords.NOT_COME.value else ''
    text = (
        f'–ó–∞–∫–∞–∑ –æ—Ç: {order.j} \n'
        f'–û–ø–µ—Ä–∞—Ç–æ—Ä: {order.k}\n'
        f'–ö–ª–∏–µ–Ω—Ç: {order.m}\n'
        f'–ù–æ–º–µ—Ä: <code>{order.n}</code> <code>{order.o}</code>\n'
        f'–î–æ—Å—Ç–∞–≤–∫–∞: {order.w}\n'
        f'–ê–¥—Ä–µ—Å: {order.x}\n'
        f'–¶–µ–Ω–∞: {cost} + {order.clmn_t}\n'
        f'–ö—É—Ä—å–µ—Ä—É –∫ –æ–ø–ª–∞—Ç–µ: {cost + order.clmn_t}\n'
        f'–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {order.ab}\n\n'
        f'{bottom_text}'
    )
    return text.replace('None', '').strip()


# —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
def get_admin_order_text(order: db.OrderRow) -> str:
    prepay = order.u + order.v

    if order.q == 0 and prepay != 0:
        cost = 0
    else:
        # (q + r + s - y) + t
        cost = order.q + order.r + order.s - order.y

    status = dt.order_status_data.get(order.g)
    text = (f'#–ó–∞–∫–∞–∑ –æ—Ç {order.j}, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {order.h}\n'
            f'#–ö—É—Ä—å–µ—Ä—Å–∫–∞—è: {dt.company_dlv.get(order.ac)} ({order.f})\n'
            f'–ù–æ–º–µ—Ä –∫—É—Ä—å–µ—Ä–∞: {order.phone}\n'
            f'–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.e} {status}\n\n'
            f'–û–ø–µ—Ä–∞—Ç–æ—Ä: {order.k}\n'
            f'–§–ò–û: {order.m}\n'
            f'#–ù–æ–º–µ—Ä: <code>{order.n}</code> <code>{order.o}</code>\n'
            f'–ú–µ—Ç—Ä–æ: {order.w} \n'
            f'–ê–¥—Ä–µ—Å: {order.x}\n\n'
            f'–¶–µ–Ω–∞: {order.q}\n'
            f'–ù–∞—Ü–µ–Ω–∫–∞: {order.r}\n'
            f'–î–æ–ø: {order.s}\n'
            f'–î–æ—Å—Ç–∞–≤–∫–∞: {order.clmn_t}\n'
            f'–ë–∏—Ç–æ–∫: {order.b}\n'
            f'–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {prepay}\n\n'
            f'–ö—É—Ä—å–µ—Ä—É –∫ –æ–ø–ª–∞—Ç–µ: {cost} + {order.clmn_t}\n'
            f'–ò—Ç–æ–≥–æ: {cost + order.clmn_t}\n\n'
            f'–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {order.ab}\n')

    return clearing_text(text)


# –∫—Ä–∞—Ç–∫–∏–π –∑–∞–∫–∞–∑ —Å—Ç—Ä–æ–∫–∞
def get_short_order_row(order: db.OrderRow, for_: str) -> str:
    cost = get_order_cost(order)

    if for_ in [UserRole.OWN.value, UserRole.OPR.value]:
        text = (f'<code>{order.n}</code>, <code>{order.o}</code>  {order.m} {order.x} '
                f'{order.f} {dt.order_status_data.get(order.g)}\n'.replace('None', ''))

    elif for_ == ShortText.ACTIVE.value:
        text = (f'{order.i} | {order.k} | {order.m} | <code>{order.n}</code> <code>{order.o}</code> '
                f'| {cost} + {order.clmn_t}| {order.w}')

    elif for_ == ShortText.FREE.value:
        # [ J ] | [ K ] | [ –ú ] | [ N ] [ O ] | ([ Q ]+[ R ]+[ S ]) + ([ T ]) | [ W ] | [ X ]
        text = (f'{order.j} | {order.k} | {order.m} | <code>{order.n}</code>  <code>{order.o}</code> |'
                f' {cost} + {order.clmn_t} | {order.w} | {order.x}')

    elif for_ == ShortText.REPORT.value:
        comment = f'({order.ab})' if order.ab else ''
        comment_d = f'({order.d})' if order.d else ''
        text = f'{comment_d} {dt.order_status_data.get (order.g)} {order.n} {cost} + {order.clmn_t} {order.w} {comment}\n'

    else:
        node = f'<code>{order.ab}</code>' if order.comp_opr == CompanyDLV.POST else ''
        text = (f'<code>{order.n}</code>  <code>{order.o}</code> {cost} + {order.clmn_t} {order.w} {node}'
                f'\n---------------------------\n')

    return text.replace('None', '')


def get_statistic_text(statistic: tuple[db.OrderGroupRow]) -> str:
    text = ''
    total = 0
    for order in statistic:
        status = dt.order_status_data.get(order.status) if order.status != OrderStatus.NEW.value else '–ë–µ–∑ –∫—É—Ä—å–µ—Ä–∞'
        if status:
            text += f'{status.capitalize()}: {order.orders_count}\n'
            total += order.orders_count
    return f'–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total}\n{text}'.strip()


# –æ—Ç—á—ë—Ç –≤ –≥—Ä—É–ø–ø—É –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –æ—Ç –∑–∞–∫–∞–∑–∞
def get_dlv_refuse_text(order: db.OrderRow, note: str) -> str:
    cost = get_order_cost(order)
    return (
        f'–ö—É—Ä—å–µ—Ä: {order.f}\n'
        f'–ù–æ–º–µ—Ä –∫—É—Ä—å–µ—Ä–∞: {order.phone}\n\n'
        f'–û–ø–µ—Ä–∞—Ç–æ—Ä: {order.k}\n'
        f'–ö–ª–∏–µ–Ω—Ç: {order.m}\n'
        f'–ù–æ–º–µ—Ä: <code>{order.n}</code>, <code>{order.o}</code>\n'
        f'–î–æ—Å—Ç–∞–≤–∫–∞: {order.w}\n'
        f'–ê–¥—Ä–µ—Å: {order.x}\n'
        f'–¶–µ–Ω–∞: {cost} + {order.clmn_t}\n'
        f'–ö—É—Ä—å–µ—Ä—É –∫ –æ–ø–ª–∞—Ç–µ: {cost + order.clmn_t}\n'
        f'–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {note}\n'
    ).replace('None', '–Ω/–¥')


# –æ—Ç—á—ë—Ç—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
def get_opr_order_text(order: db.OrderRow) -> str:
    cost = get_order_cost (order)
    mark = dt.order_mark.get (order.g, '')
    status_str = dt.order_status_data.get (order.g, '')
    comp = dt.company_dlv.get (order.ac, '–Ω/–¥')
    node = f'–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä <code>{order.ab}</code>' if order.g == OrderStatus.SEND else f'–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {order.ab}'
    return (
        f'{mark} {status_str} {order.e}\n'
        f'–ö—É—Ä—å–µ—Ä: {order.f} ({comp})\n\n'
        f'–û–ø–µ—Ä–∞—Ç–æ—Ä: {order.k}\n'
        f'–§–ò–û: {order.m}\n'
        f'–ù–æ–º–µ—Ä: <code>{order.n}</code>, <code>{order.o}</code>\n'
        f'–¶–µ–Ω–∞: {cost}\n'
        f'–î–æ—Å—Ç–∞–≤–∫–∞: {order.clmn_t}\n'
        f'–ú–µ—Ç—Ä–æ: {order.w}\n'
        f'–ê–¥—Ä–µ—Å: {order.x}\n'
        f'{node}\n'
    ).replace ('None', '–Ω/–¥').strip()


def get_opr_report_text(order: db.OrderRow) -> str:
    cost = get_order_cost (order)
    mark = dt.order_mark.get(order.g, '')
    status_str = dt.order_status_data.get(order.g, '')
    comp = dt.company_dlv.get(order.ac, '–Ω/–¥')

    if not order.ab:
        node = ''
    elif order.comp_opr == CompanyDLV.POST:
        node = f'–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä <code>{order.ab}</code>'
    elif order.g in ref_status_list:
        node = f'–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {order.ab}'
    else:
        node = f'–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {order.ab}'

    return (f'{mark} {status_str} {order.e}\n'
            f'–ö—É—Ä—å–µ—Ä—Å–∫–∞—è: {comp} ({order.f})\n'
            f'–ù–æ–º–µ—Ä –∫—É—Ä—å–µ—Ä–∞: {order.phone}\n\n'
            f'–û–ø–µ—Ä–∞—Ç–æ—Ä {order.k}\n'
            f'–§–ò–û {order.m}\n'
            f'–ù–æ–º–µ—Ä {order.n}  {order.o}\n'
            f'–ú–µ—Ç—Ä–æ {order.w}\n\n'
            f'–ö—É—Ä—å–µ—Ä—É –∫ –æ–ø–ª–∞—Ç–µ: {cost} + {order.clmn_t} \n'
            f'–ö—É—Ä—å–µ—Ä—É –∫ –æ–ø–ª–∞—Ç–µ: {cost + order.clmn_t} \n\n'
            f'{node}').replace('None', '–Ω/–¥').strip()

    # if order.g == OrderStatus.NEW.value:
    #     text = (f'–ø—Ä–∏–Ω—è—Ç {order.j} |  –æ–ø–µ—Ä–∞—Ç–æ—Ä {order.k} | –§–ò–û {order.m} | —Ç–µ–ª {order.n} —Ç–µ–ª2 {order.o} |  '
    #             f'—Ü–µ–Ω–∞ {cost} + –¥–æ—Å—Ç–∞–≤–∫–∞  {order.clmn_t} |  –º–µ—Ç—Ä–æ {order.w} | –∞–¥—Ä–µ—Å {order.x}')
    #
    # else:

        # text = (f'{mark} {status_str} {order.e}\n'
        #         f'–ö—É—Ä—å–µ—Ä—Å–∫–∞—è: {comp} ({order.f})\n'
        #         f'–ù–æ–º–µ—Ä –∫—É—Ä—å–µ—Ä–∞: {order.phone}\n\n'
        #         f'–ø—Ä–∏–Ω—è—Ç {order.j} |  –æ–ø–µ—Ä–∞—Ç–æ—Ä {order.k} | –§–ò–û {order.m} | —Ç–µ–ª {order.n} —Ç–µ–ª2 {order.o} |  '
        #         f'—Ü–µ–Ω–∞ {cost} + –¥–æ—Å—Ç–∞–≤–∫–∞  {order.clmn_t} |  –º–µ—Ç—Ä–æ {order.w} | –∞–¥—Ä–µ—Å {order.x}\n\n'
        #         f'{node}')

    # return text.replace('None', '–Ω/–¥').strip()

'''

üü¢ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω 14.06
–ó–∞–∫–∞–∑ –æ—Ç 13.06, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¢—Ä–∏–Ω–∏—Ç–∏
–ö—É—Ä—å–µ—Ä—Å–∫–∞—è: –ü—É—Ç–∏–ª–∏–Ω (–¢–≤–µ—Ä–¥—ã–π)
–ù–æ–º–µ—Ä –∫—É—Ä—å–µ—Ä–∞: +79

–û–ø–µ—Ä–∞—Ç–æ—Ä: 18
–§–ò–û: –∫—Ä–µ–π–¥–∏—á –¥–º–∏—Ç—Ä–∏–π –º–∞–∫—Å–∏–º–æ–≤–∏—á
–ù–æ–º–µ—Ä: 9036695755 
–ú–µ—Ç—Ä–æ: —â–µ–ª–∫–æ–≤—Å–∫–∞—è 

–ö—É—Ä—å–µ—Ä—É –∫ –æ–ø–ª–∞—Ç–µ: 5800 + 300
–ò—Ç–æ–≥–æ: 6100

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:



üü† –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω 31.05
–ó–∞–∫–∞–∑ –æ—Ç 30.05, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ö—É–∫–ª–∞
–ö—É—Ä—å–µ—Ä—Å–∫–∞—è: –ü–æ—á—Ç–∞ / –°–î–≠–ö (–ù–∏–∫–æ–ª—å)

–û–ø–µ—Ä–∞—Ç–æ—Ä: 18
–§–ò–û: –∑—ã–∑–¥–∞
–ù–æ–º–µ—Ä: 9229995903 
–ú–µ—Ç—Ä–æ: –ø–æ—á—Ç–∞ 
–ê–¥—Ä–µ—Å: –µ–º—Å
–∞–¥—Ä–µ—Å: –∫–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª., –º—É—Ä–∞—à–∏–Ω—Å–∫–∏–π —Ä-–æ–Ω, –ø–æ—Å—ë–ª–æ–∫ –æ–∫—Ç—è–±—Ä—å—Å–∫–∏–π, —É–ª. —Å–≤–æ–±–æ–¥—ã, –¥.32, –∫–≤.2
–ø–æ–ª—É—á–∞—Ç–µ–ª—å: –∑—ã–∑–¥–∞ –¥–º–∏—Ç—Ä–∏–π –∏–≤–∞–Ω–æ–≤–∏—á

–ö—É—Ä—å–µ—Ä—É –∫ –æ–ø–ª–∞—Ç–µ: 0 + 1800
–ò—Ç–æ–≥–æ: 1800

–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä: ED328833991RU



üü° –Ω–∞ —Ä—É–∫–∞—Ö 14.06
–ó–∞–∫–∞–∑ –æ—Ç 14.06, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ù–∞—Å—Ç—è
–ö—É—Ä—å–µ—Ä—Å–∫–∞—è: –ü—É—Ç–∏–ª–∏–Ω (–î–∏–º–∞—Å)
–ù–æ–º–µ—Ä –∫—É—Ä—å–µ—Ä–∞: +79

–û–ø–µ—Ä–∞—Ç–æ—Ä: 18
–§–ò–û: –±–∞–∫–µ–µ–≤ –∞–ª–µ–∫—Å–∞–Ω–¥—Ä –º–∏—Ö–∞–π–ª–æ–≤–∏—á
–ù–æ–º–µ—Ä: 9258488251 
–ú–µ—Ç—Ä–æ: —à–æ—Å—Å–µ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤ 
–ê–¥—Ä–µ—Å: —à–æ—Å—Å–µ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤, –¥.31–¥

–ö—É—Ä—å–µ—Ä—É –∫ –æ–ø–ª–∞—Ç–µ: 0 + 0
–ò—Ç–æ–≥–æ: 0



üî¥ –æ—Ç–∫–∞–∑ 13.06
–ó–∞–∫–∞–∑ –æ—Ç 03.06, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¢—Ä–∏–Ω–∏—Ç–∏
–ö—É—Ä—å–µ—Ä—Å–∫–∞—è: –ü—É—Ç–∏–ª–∏–Ω (–¢–æ–¥)
–ù–æ–º–µ—Ä –∫—É—Ä—å–µ—Ä–∞: +79

–û–ø–µ—Ä–∞—Ç–æ—Ä: 18
–§–ò–û: –ª–µ–≤–∫–æ–≤–∏—á –¥–µ–Ω–∏—Å –º–∏—Ö–∞–π–ª–æ–≤–∏—á
–ù–æ–º–µ—Ä: 9653365596 9135822746
–ú–µ—Ç—Ä–æ: –ø—É—à–∫–∏–Ω—Å–∫–∞—è 

–ö—É—Ä—å–µ—Ä—É –∫ –æ–ø–ª–∞—Ç–µ: 5500 + 300
–ò—Ç–æ–≥–æ: 5800

–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞:
'''
